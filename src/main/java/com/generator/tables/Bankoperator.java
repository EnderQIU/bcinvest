/*
 * This file is generated by jOOQ.
*/
package com.generator.tables;


import com.generator.Bcinvest;
import com.generator.Indexes;
import com.generator.Keys;
import com.generator.tables.records.BankoperatorRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bankoperator extends TableImpl<BankoperatorRecord> {

    private static final long serialVersionUID = 1955284666;

    /**
     * The reference instance of <code>bcinvest.BankOperator</code>
     */
    public static final Bankoperator BANKOPERATOR = new Bankoperator();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankoperatorRecord> getRecordType() {
        return BankoperatorRecord.class;
    }

    /**
     * The column <code>bcinvest.BankOperator.id</code>.
     */
    public final TableField<BankoperatorRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>bcinvest.BankOperator.username</code>.
     */
    public final TableField<BankoperatorRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>bcinvest.BankOperator.password</code>.
     */
    public final TableField<BankoperatorRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>bcinvest.BankOperator.token</code>.
     */
    public final TableField<BankoperatorRecord, String> TOKEN = createField("token", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * Create a <code>bcinvest.BankOperator</code> table reference
     */
    public Bankoperator() {
        this(DSL.name("BankOperator"), null);
    }

    /**
     * Create an aliased <code>bcinvest.BankOperator</code> table reference
     */
    public Bankoperator(String alias) {
        this(DSL.name(alias), BANKOPERATOR);
    }

    /**
     * Create an aliased <code>bcinvest.BankOperator</code> table reference
     */
    public Bankoperator(Name alias) {
        this(alias, BANKOPERATOR);
    }

    private Bankoperator(Name alias, Table<BankoperatorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bankoperator(Name alias, Table<BankoperatorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Bcinvest.BCINVEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BANKOPERATOR_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BankoperatorRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BANKOPERATOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BankoperatorRecord> getPrimaryKey() {
        return Keys.KEY_BANKOPERATOR_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BankoperatorRecord>> getKeys() {
        return Arrays.<UniqueKey<BankoperatorRecord>>asList(Keys.KEY_BANKOPERATOR_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Bankoperator as(String alias) {
        return new Bankoperator(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Bankoperator as(Name alias) {
        return new Bankoperator(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bankoperator rename(String name) {
        return new Bankoperator(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bankoperator rename(Name name) {
        return new Bankoperator(name, null);
    }
}
