/*
 * This file is generated by jOOQ.
*/
package com.generator.tables;


import com.generator.Bcinvest;
import com.generator.Indexes;
import com.generator.Keys;
import com.generator.tables.records.FundamentalcertificateRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Fundamentalcertificate extends TableImpl<FundamentalcertificateRecord> {

    private static final long serialVersionUID = -1611099614;

    /**
     * The reference instance of <code>bcinvest.fundamentalcertificate</code>
     */
    public static final Fundamentalcertificate FUNDAMENTALCERTIFICATE = new Fundamentalcertificate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FundamentalcertificateRecord> getRecordType() {
        return FundamentalcertificateRecord.class;
    }

    /**
     * The column <code>bcinvest.fundamentalcertificate.BusinessLicenceNum</code>.
     */
    public final TableField<FundamentalcertificateRecord, String> BUSINESSLICENCENUM = createField("BusinessLicenceNum", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>bcinvest.fundamentalcertificate.StartDate</code>.
     */
    public final TableField<FundamentalcertificateRecord, LocalDateTime> STARTDATE = createField("StartDate", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>bcinvest.fundamentalcertificate.EndDate</code>.
     */
    public final TableField<FundamentalcertificateRecord, LocalDateTime> ENDDATE = createField("EndDate", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>bcinvest.fundamentalcertificate.BusinessRegistrationNo</code>.
     */
    public final TableField<FundamentalcertificateRecord, String> BUSINESSREGISTRATIONNO = createField("BusinessRegistrationNo", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>bcinvest.fundamentalcertificate.RegisteredCapital</code>.
     */
    public final TableField<FundamentalcertificateRecord, Long> REGISTEREDCAPITAL = createField("RegisteredCapital", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>bcinvest.fundamentalcertificate.MainBusinessScope</code>.
     */
    public final TableField<FundamentalcertificateRecord, String> MAINBUSINESSSCOPE = createField("MainBusinessScope", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>bcinvest.fundamentalcertificate.OperationType</code>.
     */
    public final TableField<FundamentalcertificateRecord, Integer> OPERATIONTYPE = createField("OperationType", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>bcinvest.fundamentalcertificate.AccountNum</code>.
     */
    public final TableField<FundamentalcertificateRecord, String> ACCOUNTNUM = createField("AccountNum", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * Create a <code>bcinvest.fundamentalcertificate</code> table reference
     */
    public Fundamentalcertificate() {
        this(DSL.name("fundamentalcertificate"), null);
    }

    /**
     * Create an aliased <code>bcinvest.fundamentalcertificate</code> table reference
     */
    public Fundamentalcertificate(String alias) {
        this(DSL.name(alias), FUNDAMENTALCERTIFICATE);
    }

    /**
     * Create an aliased <code>bcinvest.fundamentalcertificate</code> table reference
     */
    public Fundamentalcertificate(Name alias) {
        this(alias, FUNDAMENTALCERTIFICATE);
    }

    private Fundamentalcertificate(Name alias, Table<FundamentalcertificateRecord> aliased) {
        this(alias, aliased, null);
    }

    private Fundamentalcertificate(Name alias, Table<FundamentalcertificateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Bcinvest.BCINVEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FUNDAMENTALCERTIFICATE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FundamentalcertificateRecord> getPrimaryKey() {
        return Keys.KEY_FUNDAMENTALCERTIFICATE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FundamentalcertificateRecord>> getKeys() {
        return Arrays.<UniqueKey<FundamentalcertificateRecord>>asList(Keys.KEY_FUNDAMENTALCERTIFICATE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<FundamentalcertificateRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FundamentalcertificateRecord, ?>>asList(Keys.FUNDAMENTALCERTIFICATE_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Fundamentalcertificate as(String alias) {
        return new Fundamentalcertificate(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Fundamentalcertificate as(Name alias) {
        return new Fundamentalcertificate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Fundamentalcertificate rename(String name) {
        return new Fundamentalcertificate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Fundamentalcertificate rename(Name name) {
        return new Fundamentalcertificate(name, null);
    }
}
