/*
 * This file is generated by jOOQ.
*/
package com.generator.tables;


import com.generator.Bcinvest;
import com.generator.Indexes;
import com.generator.Keys;
import com.generator.tables.records.HouseRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class House extends TableImpl<HouseRecord> {

    private static final long serialVersionUID = -2011346299;

    /**
     * The reference instance of <code>bcinvest.House</code>
     */
    public static final House HOUSE = new House();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HouseRecord> getRecordType() {
        return HouseRecord.class;
    }

    /**
     * The column <code>bcinvest.House.Addr</code>.
     */
    public final TableField<HouseRecord, String> ADDR = createField("Addr", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>bcinvest.House.Zip</code>.
     */
    public final TableField<HouseRecord, String> ZIP = createField("Zip", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>bcinvest.House.HousingCertificatedId</code>.
     */
    public final TableField<HouseRecord, String> HOUSINGCERTIFICATEDID = createField("HousingCertificatedId", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>bcinvest.House.GuarantyId</code>.
     */
    public final TableField<HouseRecord, Integer> GUARANTYID = createField("GuarantyId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>bcinvest.House</code> table reference
     */
    public House() {
        this(DSL.name("House"), null);
    }

    /**
     * Create an aliased <code>bcinvest.House</code> table reference
     */
    public House(String alias) {
        this(DSL.name(alias), HOUSE);
    }

    /**
     * Create an aliased <code>bcinvest.House</code> table reference
     */
    public House(Name alias) {
        this(alias, HOUSE);
    }

    private House(Name alias, Table<HouseRecord> aliased) {
        this(alias, aliased, null);
    }

    private House(Name alias, Table<HouseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Bcinvest.BCINVEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HOUSE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<HouseRecord> getPrimaryKey() {
        return Keys.KEY_HOUSE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<HouseRecord>> getKeys() {
        return Arrays.<UniqueKey<HouseRecord>>asList(Keys.KEY_HOUSE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<HouseRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<HouseRecord, ?>>asList(Keys.HOUSE_FK_GUARANTY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public House as(String alias) {
        return new House(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public House as(Name alias) {
        return new House(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public House rename(String name) {
        return new House(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public House rename(Name name) {
        return new House(name, null);
    }
}
