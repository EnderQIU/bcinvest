/*
 * This file is generated by jOOQ.
*/
package com.generator.tables;


import com.generator.Bcinvest;
import com.generator.Indexes;
import com.generator.Keys;
import com.generator.tables.records.CreditRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Credit extends TableImpl<CreditRecord> {

    private static final long serialVersionUID = -2069581332;

    /**
     * The reference instance of <code>bcinvest.Credit</code>
     */
    public static final Credit CREDIT = new Credit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CreditRecord> getRecordType() {
        return CreditRecord.class;
    }

    /**
     * The column <code>bcinvest.Credit.AccountNum</code>.
     */
    public final TableField<CreditRecord, String> ACCOUNTNUM = createField("AccountNum", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>bcinvest.Credit.GuarantyId</code>.
     */
    public final TableField<CreditRecord, Integer> GUARANTYID = createField("GuarantyId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bcinvest.Credit.ReportId</code>.
     */
    public final TableField<CreditRecord, Integer> REPORTID = createField("ReportId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bcinvest.Credit.Type</code>.
     */
    public final TableField<CreditRecord, Byte> TYPE = createField("Type", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * Create a <code>bcinvest.Credit</code> table reference
     */
    public Credit() {
        this(DSL.name("Credit"), null);
    }

    /**
     * Create an aliased <code>bcinvest.Credit</code> table reference
     */
    public Credit(String alias) {
        this(DSL.name(alias), CREDIT);
    }

    /**
     * Create an aliased <code>bcinvest.Credit</code> table reference
     */
    public Credit(Name alias) {
        this(alias, CREDIT);
    }

    private Credit(Name alias, Table<CreditRecord> aliased) {
        this(alias, aliased, null);
    }

    private Credit(Name alias, Table<CreditRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Bcinvest.BCINVEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CREDIT_CREDIT_FK_GUARANTY, Indexes.CREDIT_CREDIT_FK_REPORT, Indexes.CREDIT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CreditRecord> getPrimaryKey() {
        return Keys.KEY_CREDIT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CreditRecord>> getKeys() {
        return Arrays.<UniqueKey<CreditRecord>>asList(Keys.KEY_CREDIT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CreditRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CreditRecord, ?>>asList(Keys.CREDIT_FK_COMPANY, Keys.CREDIT_FK_GUARANTY, Keys.CREDIT_FK_REPORT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Credit as(String alias) {
        return new Credit(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Credit as(Name alias) {
        return new Credit(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Credit rename(String name) {
        return new Credit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Credit rename(Name name) {
        return new Credit(name, null);
    }
}
