/*
 * This file is generated by jOOQ.
*/
package com.generator.tables;


import com.generator.Bcinvest;
import com.generator.Indexes;
import com.generator.Keys;
import com.generator.tables.records.LandRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Land extends TableImpl<LandRecord> {

    private static final long serialVersionUID = 1602471698;

    /**
     * The reference instance of <code>bcinvest.Land</code>
     */
    public static final Land LAND = new Land();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LandRecord> getRecordType() {
        return LandRecord.class;
    }

    /**
     * The column <code>bcinvest.Land.Addr</code>.
     */
    public final TableField<LandRecord, String> ADDR = createField("Addr", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>bcinvest.Land.Area</code>.
     */
    public final TableField<LandRecord, Long> AREA = createField("Area", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>bcinvest.Land.GuarantyId</code>.
     */
    public final TableField<LandRecord, Integer> GUARANTYID = createField("GuarantyId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>bcinvest.Land</code> table reference
     */
    public Land() {
        this(DSL.name("Land"), null);
    }

    /**
     * Create an aliased <code>bcinvest.Land</code> table reference
     */
    public Land(String alias) {
        this(DSL.name(alias), LAND);
    }

    /**
     * Create an aliased <code>bcinvest.Land</code> table reference
     */
    public Land(Name alias) {
        this(alias, LAND);
    }

    private Land(Name alias, Table<LandRecord> aliased) {
        this(alias, aliased, null);
    }

    private Land(Name alias, Table<LandRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Bcinvest.BCINVEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LAND_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LandRecord> getPrimaryKey() {
        return Keys.KEY_LAND_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LandRecord>> getKeys() {
        return Arrays.<UniqueKey<LandRecord>>asList(Keys.KEY_LAND_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<LandRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LandRecord, ?>>asList(Keys.LAND_FK_GUARANTY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Land as(String alias) {
        return new Land(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Land as(Name alias) {
        return new Land(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Land rename(String name) {
        return new Land(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Land rename(Name name) {
        return new Land(name, null);
    }
}
