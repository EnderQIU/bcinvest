/*
 * This file is generated by jOOQ.
*/
package com.generator.tables.daos;


import com.generator.tables.Authority;
import com.generator.tables.records.AuthorityRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorityDao extends DAOImpl<AuthorityRecord, com.generator.tables.pojos.Authority, Integer> {

    /**
     * Create a new AuthorityDao without any configuration
     */
    public AuthorityDao() {
        super(Authority.AUTHORITY, com.generator.tables.pojos.Authority.class);
    }

    /**
     * Create a new AuthorityDao with an attached configuration
     */
    public AuthorityDao(Configuration configuration) {
        super(Authority.AUTHORITY, com.generator.tables.pojos.Authority.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(com.generator.tables.pojos.Authority object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.generator.tables.pojos.Authority> fetchById(Integer... values) {
        return fetch(Authority.AUTHORITY.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.generator.tables.pojos.Authority fetchOneById(Integer value) {
        return fetchOne(Authority.AUTHORITY.ID, value);
    }

    /**
     * Fetch records that have <code>token IN (values)</code>
     */
    public List<com.generator.tables.pojos.Authority> fetchByToken(String... values) {
        return fetch(Authority.AUTHORITY.TOKEN, values);
    }

    /**
     * Fetch records that have <code>username IN (values)</code>
     */
    public List<com.generator.tables.pojos.Authority> fetchByUsername(String... values) {
        return fetch(Authority.AUTHORITY.USERNAME, values);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<com.generator.tables.pojos.Authority> fetchByPassword(String... values) {
        return fetch(Authority.AUTHORITY.PASSWORD, values);
    }
}
