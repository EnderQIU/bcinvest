/*
 * This file is generated by jOOQ.
*/
package com.generator;


import com.generator.tables.Accesstoken;
import com.generator.tables.Authority;
import com.generator.tables.Bankoperator;
import com.generator.tables.Company;
import com.generator.tables.Guaranty;
import com.generator.tables.Protocol;
import com.generator.tables.Report;
import com.generator.tables.records.AccesstokenRecord;
import com.generator.tables.records.AuthorityRecord;
import com.generator.tables.records.BankoperatorRecord;
import com.generator.tables.records.CompanyRecord;
import com.generator.tables.records.GuarantyRecord;
import com.generator.tables.records.ProtocolRecord;
import com.generator.tables.records.ReportRecord;

import javax.annotation.Generated;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>bcinvest</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AccesstokenRecord, Integer> IDENTITY_ACCESSTOKEN = Identities0.IDENTITY_ACCESSTOKEN;
    public static final Identity<AuthorityRecord, Integer> IDENTITY_AUTHORITY = Identities0.IDENTITY_AUTHORITY;
    public static final Identity<BankoperatorRecord, Integer> IDENTITY_BANKOPERATOR = Identities0.IDENTITY_BANKOPERATOR;
    public static final Identity<CompanyRecord, Integer> IDENTITY_COMPANY = Identities0.IDENTITY_COMPANY;
    public static final Identity<GuarantyRecord, Integer> IDENTITY_GUARANTY = Identities0.IDENTITY_GUARANTY;
    public static final Identity<ReportRecord, Integer> IDENTITY_REPORT = Identities0.IDENTITY_REPORT;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccesstokenRecord> KEY_ACCESSTOKEN_PRIMARY = UniqueKeys0.KEY_ACCESSTOKEN_PRIMARY;
    public static final UniqueKey<AuthorityRecord> KEY_AUTHORITY_PRIMARY = UniqueKeys0.KEY_AUTHORITY_PRIMARY;
    public static final UniqueKey<BankoperatorRecord> KEY_BANKOPERATOR_PRIMARY = UniqueKeys0.KEY_BANKOPERATOR_PRIMARY;
    public static final UniqueKey<CompanyRecord> KEY_COMPANY_PRIMARY = UniqueKeys0.KEY_COMPANY_PRIMARY;
    public static final UniqueKey<CompanyRecord> KEY_COMPANY_EMAIL_UNIQUE = UniqueKeys0.KEY_COMPANY_EMAIL_UNIQUE;
    public static final UniqueKey<GuarantyRecord> KEY_GUARANTY_PRIMARY = UniqueKeys0.KEY_GUARANTY_PRIMARY;
    public static final UniqueKey<ProtocolRecord> KEY_PROTOCOL_PRIMARY = UniqueKeys0.KEY_PROTOCOL_PRIMARY;
    public static final UniqueKey<ReportRecord> KEY_REPORT_PRIMARY = UniqueKeys0.KEY_REPORT_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<AccesstokenRecord, Integer> IDENTITY_ACCESSTOKEN = Internal.createIdentity(Accesstoken.ACCESSTOKEN, Accesstoken.ACCESSTOKEN.ID);
        public static Identity<AuthorityRecord, Integer> IDENTITY_AUTHORITY = Internal.createIdentity(Authority.AUTHORITY, Authority.AUTHORITY.ID);
        public static Identity<BankoperatorRecord, Integer> IDENTITY_BANKOPERATOR = Internal.createIdentity(Bankoperator.BANKOPERATOR, Bankoperator.BANKOPERATOR.ID);
        public static Identity<CompanyRecord, Integer> IDENTITY_COMPANY = Internal.createIdentity(Company.COMPANY, Company.COMPANY.ID);
        public static Identity<GuarantyRecord, Integer> IDENTITY_GUARANTY = Internal.createIdentity(Guaranty.GUARANTY, Guaranty.GUARANTY.ID);
        public static Identity<ReportRecord, Integer> IDENTITY_REPORT = Internal.createIdentity(Report.REPORT, Report.REPORT.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<AccesstokenRecord> KEY_ACCESSTOKEN_PRIMARY = Internal.createUniqueKey(Accesstoken.ACCESSTOKEN, "KEY_AccessToken_PRIMARY", Accesstoken.ACCESSTOKEN.ID);
        public static final UniqueKey<AuthorityRecord> KEY_AUTHORITY_PRIMARY = Internal.createUniqueKey(Authority.AUTHORITY, "KEY_Authority_PRIMARY", Authority.AUTHORITY.ID);
        public static final UniqueKey<BankoperatorRecord> KEY_BANKOPERATOR_PRIMARY = Internal.createUniqueKey(Bankoperator.BANKOPERATOR, "KEY_BankOperator_PRIMARY", Bankoperator.BANKOPERATOR.ID);
        public static final UniqueKey<CompanyRecord> KEY_COMPANY_PRIMARY = Internal.createUniqueKey(Company.COMPANY, "KEY_Company_PRIMARY", Company.COMPANY.ID);
        public static final UniqueKey<CompanyRecord> KEY_COMPANY_EMAIL_UNIQUE = Internal.createUniqueKey(Company.COMPANY, "KEY_Company_email_UNIQUE", Company.COMPANY.EMAIL);
        public static final UniqueKey<GuarantyRecord> KEY_GUARANTY_PRIMARY = Internal.createUniqueKey(Guaranty.GUARANTY, "KEY_Guaranty_PRIMARY", Guaranty.GUARANTY.ID);
        public static final UniqueKey<ProtocolRecord> KEY_PROTOCOL_PRIMARY = Internal.createUniqueKey(Protocol.PROTOCOL, "KEY_Protocol_PRIMARY", Protocol.PROTOCOL.ID);
        public static final UniqueKey<ReportRecord> KEY_REPORT_PRIMARY = Internal.createUniqueKey(Report.REPORT, "KEY_Report_PRIMARY", Report.REPORT.ID);
    }
}
